{"version":3,"sources":["App.js","reportWebVitals.js","index.js","App.module.css"],"names":["MatrixInput","rows","columns","initialValue","value","setInitialValue","setValue","className","props","useState","isValid","setIsValid","touched","setTouched","cols","setCols","validate","currentRows","split","length","every","row","num","match","useEffect","Array","isArray","map","join","parseValue","handleCols","matrix","rowsLengths","Math","max","classes","hasError","onChange","target","onBlur","isNaN","parseFloat","processValue","Header","App","size","setSize","vector","setVector","W","setW","V","setV","Net1","setNet1","Net2","setNet2","Out1","setOut1","Out2","setOut2","auto","setAuto","createMatrix","from","fill","toFixed","computeNet","result","i","j","vecElem","matrElem","computeOut","net","pow","E","ResultColumn","title","wrapper","readOnly","offsetWrapper","type","sizeInput","min","Number","checked","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.36961962.chunk.js","sourcesContent":["import classes from './App.module.css'\nimport React, { useEffect, useState } from 'react'\n\nconst MatrixInput = ({\n  rows,\n  columns,\n  value: initialValue,\n  setValue: setInitialValue,\n  className,\n  ...props\n}) => {\n  const [value, setValue] = useState('')\n  const [isValid, setIsValid] = useState(true)\n  const [touched, setTouched] = useState(false)\n  const [cols, setCols] = useState(columns)\n\n  const parseValue = (value) => {\n    return value.map(row => row.join(' ')).join('\\n')\n  }\n\n  const processValue = (value) => {\n    return value.split('\\n').map(\n      row => row.split(' ').map(\n        num => isNaN(num) ? num : parseFloat(num)\n      )\n    )\n  }\n\n  const validate = (value) => {\n    const currentRows = value.split('\\n')\n    if (rows && currentRows.length !== rows) {\n      return false\n    }\n    if (columns && !currentRows.every(row => row.split(' ').length === columns)) {\n      return false\n    }\n    if (!currentRows.every(row => row.split(' ').every(num => num.match(/^(\\d+[.,])?\\d+$/)))) {\n      return false\n    }\n    return true\n  }\n\n  useEffect(() => {\n    const value = Array.isArray(initialValue) ? parseValue(initialValue) : initialValue\n    handleCols(value)\n    setValue(value)\n    const isValid = validate(value)\n    setIsValid(isValid)\n  }, [initialValue])\n\n  const onBlur = () => {\n    !touched && setTouched(true)\n    const isValid = validate(value)\n    setIsValid(isValid)\n    if (value && setInitialValue) {\n      setInitialValue(processValue(value))\n    }\n  }\n\n  const handleCols = (matrix) => {\n    const rowsLengths = Array.isArray(matrix)\n      ? matrix.map(row => row.join(' ').length)\n      : matrix.split('\\n').map(row => row.length)\n    const cols = Math.max(...rowsLengths)\n    setCols(cols)\n  }\n\n  const changeHandler = ({ target }) => {\n    const { value } = target\n    handleCols(value)\n    setValue(value)\n  }\n\n  return (\n    <textarea\n      className={`${touched && !isValid ? classes.hasError : ''} ${className}`}\n      value={value}\n      onChange={changeHandler}\n      onBlur={onBlur}\n      rows={rows}\n      cols={cols}\n      {...props}\n    />\n  )\n}\n\nconst Header = () => {\n  return (\n    <>\n      <h2>Реализация матричной модели обработки информации в искусственных нейронный сетях</h2>\n      <p>Разработчики:</p>\n      <ul>\n        <li>Овчинникова М. А.</li>\n        <li>Ларюшина И. А.</li>\n        <li>Комиссарова Е. Г.</li>\n        <li>Кувшинов В. Л.</li>\n      </ul>\n      <hr />\n    </>\n  )\n}\n\nconst App = () => {\n  const [size, setSize] = useState(5)\n  const [vector, setVector] = useState([])\n  const [W, setW] = useState([])\n  const [V, setV] = useState([])\n  const [Net1, setNet1] = useState([])\n  const [Net2, setNet2] = useState([])\n  const [Out1, setOut1] = useState([])\n  const [Out2, setOut2] = useState([])\n  const [auto, setAuto] = useState(true)\n\n  useEffect(() => {\n    const createMatrix = (value) => {\n      const row = Array.from({ length: size }).fill(value)\n      return Array.from({ length: size }).fill(row)\n    }\n\n    const value = auto ? parseFloat((1 / size).toFixed(3)) : 0\n    setW(createMatrix(value))\n    setV(createMatrix(value))\n  }, [auto, size])\n\n  const computeNet = (vector, matrix) => {\n    if (!vector || vector.length !== size || matrix.length !== size) return[]\n    const result = Array.from({ length: vector.length }).fill(0)\n    for (let i = 0; i < vector.length; i++) {\n      for (let j = 0; j < matrix.length; j++) {\n        const vecElem = vector[j]\n        const matrElem = matrix[j][i]\n        if (typeof vecElem !== 'number' || typeof matrElem !== 'number') return []\n        result[i] += vecElem * matrElem\n      } \n    }\n    return result\n  }\n\n  const computeOut = (net) => {\n    return net.map(num => 1 / (1 + Math.pow(Math.E, -num)))\n  }\n\n  useEffect(() => {\n    setNet1(computeNet(vector[0], W))\n  }, [vector[0], W])\n\n  useEffect(() => {\n    setOut1(computeOut(Net1))\n  }, [Net1])\n\n  useEffect(() => {\n    setNet2(computeNet(Out1, V))\n  }, [Out1, V])\n\n  useEffect(() => {\n    setOut2(computeOut(Net2))\n  }, [Net2])\n\n  const ResultColumn = ({ title, result }) => {\n    return (\n      <div>\n        {title}\n        <div className={classes.net}>\n          {result.map(num => <div>{parseFloat(num.toFixed(3))}</div>)}\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <>\n      <Header />\n      <div className={classes.wrapper}>\n        <div>\n          Вектор\n          <MatrixInput\n            rows={1}\n            columns={size}\n            className={classes.matrix}\n            value={vector}\n            setValue={setVector}\n          />\n        </div>\n        <div>\n          Матрица W\n          <MatrixInput\n            rows={size}\n            columns={size}\n            className={classes.matrix}\n            value={W}\n            setValue={setW}\n            readOnly={auto}\n          />\n        </div>\n        <ResultColumn title='NET1' result={Net1} />\n        <ResultColumn title='OUT1' result={Out1} />\n        <div>\n          Матрица V\n          <MatrixInput\n            rows={size}\n            columns={size}\n            className={classes.matrix}\n            value={V}\n            setValue={setV}\n            readOnly={auto}\n          />\n        </div>\n        <ResultColumn title='NET2' result={Net2} />\n        <ResultColumn title='OUT2' result={Out2} />\n      </div>\n      <div className={classes.offsetWrapper}>\n        <span>Размер</span>\n        <input\n          type='number'\n          className={classes.sizeInput}\n          min={1}\n          value={size}\n          onChange={({ target }) => { setSize(Number(target.value)) }}\n        />\n        <span>Автоматическое заполнение</span>\n        <input\n          type='checkbox'\n          checked={auto}\n          onChange={({ target }) => { setAuto(target.checked) }}\n        />\n      </div>\n    </>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__1e4aq\",\"matrix\":\"App_matrix__2itPs\",\"hasError\":\"App_hasError__1XVPj\",\"offsetWrapper\":\"App_offsetWrapper__sXNKM\",\"sizeInput\":\"App_sizeInput__1a8zq\",\"net\":\"App_net__HF6kL\"};"],"sourceRoot":""}