{"version":3,"sources":["App.js","reportWebVitals.js","index.js","App.module.css"],"names":["MatrixInput","rows","columns","initialValue","value","setInitialValue","setValue","className","useState","isValid","setIsValid","touched","setTouched","validate","currentRows","split","length","every","row","num","match","useEffect","Array","isArray","map","join","parseValue","classes","hasError","onChange","target","onBlur","result","parseFloat","isNaN","processValue","App","size","setSize","vector","setVector","W","setW","V","setV","Net1","setNet1","Net2","setNet2","Out1","setOut1","Out2","setOut2","computeNet","matrix","from","fill","i","j","vecElem","matrElem","computeOut","net","Math","pow","E","ResultColumn","title","toFixed","wrapper","offsetWrapper","type","sizeInput","min","onClick","createMatrix","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.da94e418.chunk.js","sourcesContent":["import classes from './App.module.css'\nimport React, { useEffect, useState } from 'react'\n\nconst MatrixInput = ({\n  rows,\n  columns,\n  value: initialValue,\n  setValue: setInitialValue,\n  className\n}) => {\n  const [value, setValue] = useState('')\n  const [isValid, setIsValid] = useState(true)\n  const [touched, setTouched] = useState(false)\n\n  const parseValue = (value) => {\n    return value.map(row => row.join(' ')).join('\\n')\n  }\n\n  const processValue = (value) => {\n    return value.split('\\n').map(\n      row => row.split(' ').map(\n        num => {\n          const result = parseFloat(num)\n          return !isNaN(result) ? result : num\n        }\n      )\n    )\n  }\n\n  const validate = (value) => {\n    const currentRows = value.split('\\n')\n    if (rows && currentRows.length !== rows) {\n      return false\n    }\n    if (columns && !currentRows.every(row => row.split(' ').length === columns)) {\n      return false\n    }\n    if (!currentRows.every(row => row.split(' ').every(num => num.match(/^(\\d+[.,])?\\d+$/)))) {\n      return false\n    }\n    return true\n  }\n\n  useEffect(() => {\n    if (!Array.isArray(initialValue)) {\n      setValue('')\n    } else {\n      const value = parseValue(initialValue)\n      setValue(value)\n      const isValid = validate(value)\n      setIsValid(isValid)\n    }\n  }, [initialValue])\n\n  const onBlur = () => {\n    !touched && setTouched(true)\n    const isValid = validate(value)\n    setIsValid(isValid)\n    if (value && setInitialValue) {\n      setInitialValue(processValue(value))\n    }\n  }\n\n  const changeHandler = ({ target }) => {\n    setValue(target.value)\n  }\n\n  return (\n    <textarea\n      className={`${touched && !isValid ? classes.hasError : ''} ${className}`}\n      value={value}\n      onChange={changeHandler}\n      onBlur={onBlur}\n    />\n  )\n}\n\nconst App = () => {\n  const [size, setSize] = useState(5)\n  const [vector, setVector] = useState([])\n  const [W, setW] = useState([])\n  const [V, setV] = useState([])\n  const [Net1, setNet1] = useState([])\n  const [Net2, setNet2] = useState([])\n  const [Out1, setOut1] = useState([])\n  const [Out2, setOut2] = useState([])\n\n  const autoSetup = () => {\n    if (vector.length && vector.length !== size) {\n      const value = vector[0][0]\n      setVector(Array.from({ length: size }).fill([value]))\n    }\n\n    const createMatrix = (value) => {\n      const row = Array.from({ length: size }).fill(value)\n      return Array.from({ length: size }).fill(row)\n    }\n\n    if (W.length && W.length !== size) {\n      const value = W[0][0]\n      setW(createMatrix(value))\n    }\n    if (V.length && V.length !== size) {\n      const value = V[0][0]\n      setV(createMatrix(value))\n    }\n  }\n\n  const computeNet = (vector, matrix) => {\n    if (vector.length !== size || matrix.length !== size) return[]\n    const result = Array.from({ length: vector.length }).fill(0)\n    for (let i = 0; i < vector.length; i++) {\n      for (let j = 0; j < matrix.length; j++) {\n        const vecElem = vector[i]\n        const matrElem = matrix[j][i]\n        if (typeof vecElem !== 'number' || typeof matrElem !== 'number') return []\n        result[i] += vecElem * matrElem\n      } \n    }\n    return result\n  }\n\n  const computeOut = (net) => {\n    return net.map(num => 1 / (1 + Math.pow(Math.E, -num)))\n  }\n\n  useEffect(() => {\n    setNet1(computeNet(vector.map(([num]) => num), W))\n  }, [vector, W])\n\n  useEffect(() => {\n    setOut1(computeOut(Net1))\n  }, [Net1])\n\n  useEffect(() => {\n    setNet2(computeNet(Out1, V))\n  }, [Out1, V])\n\n  useEffect(() => {\n    setOut2(computeOut(Net2))\n  }, [Net2])\n\n  const ResultColumn = ({ title, result }) => {\n    return (\n      <div>\n        {title}\n        <div className={classes.net}>\n          {result.map(num => <div>{parseFloat(num.toFixed(4))}</div>)}\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <>\n      <h2>Реализация матричной модели обработки информации в искусственных нейронный сетях</h2>\n      <p>Разработчики:</p>\n      <ul>\n        <li>Овчинникова М. А.</li>\n        <li>Ларюшина И. А.</li>\n        <li>Комиссарова Е. Г.</li>\n        <li>Кувшинов В. Л.</li>\n      </ul>\n      <hr />\n      <div className={classes.wrapper}>\n        <div>\n          Вектор\n          <MatrixInput\n            rows={5}\n            columns={1}\n            className={`${classes.matrix} ${classes.vector}`}\n            value={vector}\n            setValue={setVector}\n          />\n        </div>\n        <div>\n          Матрица W\n          <MatrixInput\n            rows={5}\n            columns={5}\n            className={classes.matrix}\n            value={W}\n            setValue={setW}\n          />\n        </div>\n        <ResultColumn title='NET1' result={Net1} />\n        <ResultColumn title='OUT1' result={Out1} />\n        <div>\n          Матрица V\n          <MatrixInput\n            rows={5}\n            columns={5}\n            className={classes.matrix}\n            value={V}\n            setValue={setV}\n          />\n        </div>\n        <ResultColumn title='NET2' result={Net2} />\n        <ResultColumn title='OUT2' result={Out2} />\n      </div>\n      <div className={classes.offsetWrapper}>\n        <span>Размер</span>\n        <input\n          type='number'\n          className={classes.sizeInput}\n          min={1}\n          value={size}\n          onChange={({ target }) => { setSize(target.value) }}\n        />\n        <button onClick={autoSetup}>Заполнить автоматически</button>\n      </div>\n    </>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__1e4aq\",\"matrix\":\"App_matrix__2itPs\",\"vector\":\"App_vector__2UMLy\",\"hasError\":\"App_hasError__1XVPj\",\"offsetWrapper\":\"App_offsetWrapper__sXNKM\",\"sizeInput\":\"App_sizeInput__1a8zq\",\"net\":\"App_net__HF6kL\"};"],"sourceRoot":""}